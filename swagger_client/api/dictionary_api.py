# coding: utf-8

"""
    CSPro Sync

    Web API for synchronizing data and files from devices in the field to a web server.   # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DictionaryApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_dictionary(self, dictionary, **kwargs):  # noqa: E501
        """Add new dictionary  # noqa: E501

        Upload a new data dictionary to the server so that data    (cases) may be associated with it.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dictionary(dictionary, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dictionary: CSPro data dictionary as plain text (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_dictionary_with_http_info(dictionary, **kwargs)  # noqa: E501
        else:
            (data) = self.add_dictionary_with_http_info(dictionary, **kwargs)  # noqa: E501
            return data

    def add_dictionary_with_http_info(self, dictionary, **kwargs):  # noqa: E501
        """Add new dictionary  # noqa: E501

        Upload a new data dictionary to the server so that data    (cases) may be associated with it.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_dictionary_with_http_info(dictionary, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dictionary: CSPro data dictionary as plain text (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dictionary']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_dictionary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dictionary' is set
        if ('dictionary' not in params or
                params['dictionary'] is None):
            raise ValueError("Missing the required parameter `dictionary` when calling `add_dictionary`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'dictionary' in params:
            body_params = params['dictionary']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain', 'application/zip'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dictionaries', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_dictionary(self, dict_name, **kwargs):  # noqa: E501
        """Delete dictionary  # noqa: E501

        Delete a dictionary on the server and all associated data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dictionary(dict_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dict_name: Name of dictionary to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_dictionary_with_http_info(dict_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_dictionary_with_http_info(dict_name, **kwargs)  # noqa: E501
            return data

    def delete_dictionary_with_http_info(self, dict_name, **kwargs):  # noqa: E501
        """Delete dictionary  # noqa: E501

        Delete a dictionary on the server and all associated data  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_dictionary_with_http_info(dict_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dict_name: Name of dictionary to delete (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dict_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_dictionary" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dict_name' is set
        if ('dict_name' not in params or
                params['dict_name'] is None):
            raise ValueError("Missing the required parameter `dict_name` when calling `delete_dictionary`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dict_name' in params:
            path_params['dictName'] = params['dict_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain', 'application/zip'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dictionaries/{dictName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_dict_by_name(self, dict_name, **kwargs):  # noqa: E501
        """Get dictionary by name  # noqa: E501

        Download the dictionary named dictName  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dict_by_name(dict_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dict_name: Name of dictionary to download (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_dict_by_name_with_http_info(dict_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_dict_by_name_with_http_info(dict_name, **kwargs)  # noqa: E501
            return data

    def get_dict_by_name_with_http_info(self, dict_name, **kwargs):  # noqa: E501
        """Get dictionary by name  # noqa: E501

        Download the dictionary named dictName  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_dict_by_name_with_http_info(dict_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dict_name: Name of dictionary to download (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dict_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_dict_by_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dict_name' is set
        if ('dict_name' not in params or
                params['dict_name'] is None):
            raise ValueError("Missing the required parameter `dict_name` when calling `get_dict_by_name`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dict_name' in params:
            path_params['dictName'] = params['dict_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dictionaries/{dictName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_dictionaries(self, **kwargs):  # noqa: E501
        """List dictionaries  # noqa: E501

        List names of available data dictionaries on this server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_dictionaries(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Dictionary]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_dictionaries_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_dictionaries_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_dictionaries_with_http_info(self, **kwargs):  # noqa: E501
        """List dictionaries  # noqa: E501

        List names of available data dictionaries on this server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_dictionaries_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[Dictionary]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_dictionaries" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dictionaries', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[Dictionary]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
