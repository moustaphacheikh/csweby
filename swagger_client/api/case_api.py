# coding: utf-8

"""
    CSPro Sync

    Web API for synchronizing data and files from devices in the field to a web server.   # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CaseApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_or_update_case(self, dict_name, case, x_csw_device, **kwargs):  # noqa: E501
        """Add or update new cases to dictionary  # noqa: E501

        Upload new cases to the dictionary named dictName  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_or_update_case(dict_name, case, x_csw_device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dict_name: Name of dictionary to add case to (required)
        :param CaseList case: Cases to add/update (required)
        :param str x_csw_device: id of device sending cases (required)
        :param str if_match: etag from previous call. If server does not have this etag it will return status 412.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_or_update_case_with_http_info(dict_name, case, x_csw_device, **kwargs)  # noqa: E501
        else:
            (data) = self.add_or_update_case_with_http_info(dict_name, case, x_csw_device, **kwargs)  # noqa: E501
            return data

    def add_or_update_case_with_http_info(self, dict_name, case, x_csw_device, **kwargs):  # noqa: E501
        """Add or update new cases to dictionary  # noqa: E501

        Upload new cases to the dictionary named dictName  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_or_update_case_with_http_info(dict_name, case, x_csw_device, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dict_name: Name of dictionary to add case to (required)
        :param CaseList case: Cases to add/update (required)
        :param str x_csw_device: id of device sending cases (required)
        :param str if_match: etag from previous call. If server does not have this etag it will return status 412.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dict_name', 'case', 'x_csw_device', 'if_match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_or_update_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dict_name' is set
        if ('dict_name' not in params or
                params['dict_name'] is None):
            raise ValueError("Missing the required parameter `dict_name` when calling `add_or_update_case`")  # noqa: E501
        # verify the required parameter 'case' is set
        if ('case' not in params or
                params['case'] is None):
            raise ValueError("Missing the required parameter `case` when calling `add_or_update_case`")  # noqa: E501
        # verify the required parameter 'x_csw_device' is set
        if ('x_csw_device' not in params or
                params['x_csw_device'] is None):
            raise ValueError("Missing the required parameter `x_csw_device` when calling `add_or_update_case`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dict_name' in params:
            path_params['dictName'] = params['dict_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_csw_device' in params:
            header_params['x-csw-device'] = params['x_csw_device']  # noqa: E501
        if 'if_match' in params:
            header_params['If-Match'] = params['if_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'case' in params:
            body_params = params['case']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain', 'application/zip'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dictionaries/{dictName}/cases', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_case(self, dict_name, case_id, **kwargs):  # noqa: E501
        """Delete existing case  # noqa: E501

        Delete existing case from the dictionary named dictName with id caseId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_case(dict_name, case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dict_name: Name of dictionary containing case (required)
        :param str case_id: Id of case to delete (GUID) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_case_with_http_info(dict_name, case_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_case_with_http_info(dict_name, case_id, **kwargs)  # noqa: E501
            return data

    def delete_case_with_http_info(self, dict_name, case_id, **kwargs):  # noqa: E501
        """Delete existing case  # noqa: E501

        Delete existing case from the dictionary named dictName with id caseId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_case_with_http_info(dict_name, case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dict_name: Name of dictionary containing case (required)
        :param str case_id: Id of case to delete (GUID) (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dict_name', 'case_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dict_name' is set
        if ('dict_name' not in params or
                params['dict_name'] is None):
            raise ValueError("Missing the required parameter `dict_name` when calling `delete_case`")  # noqa: E501
        # verify the required parameter 'case_id' is set
        if ('case_id' not in params or
                params['case_id'] is None):
            raise ValueError("Missing the required parameter `case_id` when calling `delete_case`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dict_name' in params:
            path_params['dictName'] = params['dict_name']  # noqa: E501
        if 'case_id' in params:
            path_params['caseId'] = params['case_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain', 'application/zip'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dictionaries/{dictName}/cases/{caseId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_case_by_id(self, dict_name, case_id, **kwargs):  # noqa: E501
        """Get case by id  # noqa: E501

        Download case for the dictionary named dictName with id caseId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_case_by_id(dict_name, case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dict_name: Name of dictionary to get cases from (required)
        :param str case_id: Id of case to download (GUID) (required)
        :return: Case
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_case_by_id_with_http_info(dict_name, case_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_case_by_id_with_http_info(dict_name, case_id, **kwargs)  # noqa: E501
            return data

    def get_case_by_id_with_http_info(self, dict_name, case_id, **kwargs):  # noqa: E501
        """Get case by id  # noqa: E501

        Download case for the dictionary named dictName with id caseId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_case_by_id_with_http_info(dict_name, case_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dict_name: Name of dictionary to get cases from (required)
        :param str case_id: Id of case to download (GUID) (required)
        :return: Case
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dict_name', 'case_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_case_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dict_name' is set
        if ('dict_name' not in params or
                params['dict_name'] is None):
            raise ValueError("Missing the required parameter `dict_name` when calling `get_case_by_id`")  # noqa: E501
        # verify the required parameter 'case_id' is set
        if ('case_id' not in params or
                params['case_id'] is None):
            raise ValueError("Missing the required parameter `case_id` when calling `get_case_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dict_name' in params:
            path_params['dictName'] = params['dict_name']  # noqa: E501
        if 'case_id' in params:
            path_params['caseId'] = params['case_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dictionaries/{dictName}/cases/{caseId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Case',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cases_for_dict(self, dict_name, **kwargs):  # noqa: E501
        """Get cases for dictionary  # noqa: E501

        Download cases for the dictionary named dictName  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cases_for_dict(dict_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dict_name: Name of dictionary to get cases from (required)
        :param str x_csw_universe: universe to limit cases returned
        :param str x_csw_case_range_start_after: only return cases whose guid is strictly greater (alphabetically) than this value. Used for paging results.
        :param int x_csw_case_range_count: limit number cases returned to this number of cases.
        :param list[str] x_csw_exclude_revisions: exclude cases from following revisions from the result. Allows device to avoid downloading cases that it previously uploaded.
        :param str x_csw_device: id of device requesting cases
        :param str if_match: etag from previous call. Only cases added/modified since this etag are returned. If server does not have this etag it will return status 412.
        :return: CaseList
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cases_for_dict_with_http_info(dict_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_cases_for_dict_with_http_info(dict_name, **kwargs)  # noqa: E501
            return data

    def get_cases_for_dict_with_http_info(self, dict_name, **kwargs):  # noqa: E501
        """Get cases for dictionary  # noqa: E501

        Download cases for the dictionary named dictName  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cases_for_dict_with_http_info(dict_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dict_name: Name of dictionary to get cases from (required)
        :param str x_csw_universe: universe to limit cases returned
        :param str x_csw_case_range_start_after: only return cases whose guid is strictly greater (alphabetically) than this value. Used for paging results.
        :param int x_csw_case_range_count: limit number cases returned to this number of cases.
        :param list[str] x_csw_exclude_revisions: exclude cases from following revisions from the result. Allows device to avoid downloading cases that it previously uploaded.
        :param str x_csw_device: id of device requesting cases
        :param str if_match: etag from previous call. Only cases added/modified since this etag are returned. If server does not have this etag it will return status 412.
        :return: CaseList
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dict_name', 'x_csw_universe', 'x_csw_case_range_start_after', 'x_csw_case_range_count', 'x_csw_exclude_revisions', 'x_csw_device', 'if_match']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cases_for_dict" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dict_name' is set
        if ('dict_name' not in params or
                params['dict_name'] is None):
            raise ValueError("Missing the required parameter `dict_name` when calling `get_cases_for_dict`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dict_name' in params:
            path_params['dictName'] = params['dict_name']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_csw_universe' in params:
            header_params['x-csw-universe'] = params['x_csw_universe']  # noqa: E501
        if 'x_csw_case_range_start_after' in params:
            header_params['x-csw-case-range-start-after'] = params['x_csw_case_range_start_after']  # noqa: E501
        if 'x_csw_case_range_count' in params:
            header_params['x-csw-case-range-count'] = params['x_csw_case_range_count']  # noqa: E501
        if 'x_csw_exclude_revisions' in params:
            header_params['x-csw-exclude-revisions'] = params['x_csw_exclude_revisions']  # noqa: E501
            collection_formats['x-csw-exclude-revisions'] = 'csv'  # noqa: E501
        if 'x_csw_device' in params:
            header_params['x-csw-device'] = params['x_csw_device']  # noqa: E501
        if 'if_match' in params:
            header_params['If-Match'] = params['if_match']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dictionaries/{dictName}/cases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CaseList',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sync_history(self, dict_name, **kwargs):  # noqa: E501
        """Get sync history  # noqa: E501

        List synchronizations for the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sync_history(dict_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dict_name: Name of dictionary containing case (required)
        :param datetime _from: Start date in RFC3339 format ( e.g. 1985-04-12T23:20:50.52Z)
        :param datetime to: End date in RFC3339 format ( e.g. 1985-04-12T23:20:50.52Z)
        :param str device_id: Device Id
        :param int limit: maximum number of cases in response
        :param int offset: zero-based index of first case to return in response
        :return: SyncHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sync_history_with_http_info(dict_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sync_history_with_http_info(dict_name, **kwargs)  # noqa: E501
            return data

    def get_sync_history_with_http_info(self, dict_name, **kwargs):  # noqa: E501
        """Get sync history  # noqa: E501

        List synchronizations for the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sync_history_with_http_info(dict_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dict_name: Name of dictionary containing case (required)
        :param datetime _from: Start date in RFC3339 format ( e.g. 1985-04-12T23:20:50.52Z)
        :param datetime to: End date in RFC3339 format ( e.g. 1985-04-12T23:20:50.52Z)
        :param str device_id: Device Id
        :param int limit: maximum number of cases in response
        :param int offset: zero-based index of first case to return in response
        :return: SyncHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dict_name', '_from', 'to', 'device_id', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dict_name' is set
        if ('dict_name' not in params or
                params['dict_name'] is None):
            raise ValueError("Missing the required parameter `dict_name` when calling `get_sync_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dict_name' in params:
            path_params['dictName'] = params['dict_name']  # noqa: E501

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dictionaries/{dictName}/syncs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SyncHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_case(self, dict_name, case_id, case, **kwargs):  # noqa: E501
        """Update existing case  # noqa: E501

        Overwrite existing case for the dictionary named dictName with id caseId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_case(dict_name, case_id, case, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dict_name: Name of dictionary containing case (required)
        :param str case_id: Id of case to update (GUID) (required)
        :param Case case: Case to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_case_with_http_info(dict_name, case_id, case, **kwargs)  # noqa: E501
        else:
            (data) = self.update_case_with_http_info(dict_name, case_id, case, **kwargs)  # noqa: E501
            return data

    def update_case_with_http_info(self, dict_name, case_id, case, **kwargs):  # noqa: E501
        """Update existing case  # noqa: E501

        Overwrite existing case for the dictionary named dictName with id caseId  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_case_with_http_info(dict_name, case_id, case, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dict_name: Name of dictionary containing case (required)
        :param str case_id: Id of case to update (GUID) (required)
        :param Case case: Case to update (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dict_name', 'case_id', 'case']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_case" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dict_name' is set
        if ('dict_name' not in params or
                params['dict_name'] is None):
            raise ValueError("Missing the required parameter `dict_name` when calling `update_case`")  # noqa: E501
        # verify the required parameter 'case_id' is set
        if ('case_id' not in params or
                params['case_id'] is None):
            raise ValueError("Missing the required parameter `case_id` when calling `update_case`")  # noqa: E501
        # verify the required parameter 'case' is set
        if ('case' not in params or
                params['case'] is None):
            raise ValueError("Missing the required parameter `case` when calling `update_case`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dict_name' in params:
            path_params['dictName'] = params['dict_name']  # noqa: E501
        if 'case_id' in params:
            path_params['caseId'] = params['case_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'case' in params:
            body_params = params['case']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/plain', 'application/zip'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dictionaries/{dictName}/cases/{caseId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
