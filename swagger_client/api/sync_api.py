# coding: utf-8

"""
    CSPro Sync

    Web API for synchronizing data and files from devices in the field to a web server.   # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SyncApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_sync_history(self, dict_name, **kwargs):  # noqa: E501
        """Get sync history  # noqa: E501

        List synchronizations for the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sync_history(dict_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dict_name: Name of dictionary containing case (required)
        :param datetime _from: Start date in RFC3339 format ( e.g. 1985-04-12T23:20:50.52Z)
        :param datetime to: End date in RFC3339 format ( e.g. 1985-04-12T23:20:50.52Z)
        :param str device_id: Device Id
        :param int limit: maximum number of cases in response
        :param int offset: zero-based index of first case to return in response
        :return: SyncHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sync_history_with_http_info(dict_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sync_history_with_http_info(dict_name, **kwargs)  # noqa: E501
            return data

    def get_sync_history_with_http_info(self, dict_name, **kwargs):  # noqa: E501
        """Get sync history  # noqa: E501

        List synchronizations for the server  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sync_history_with_http_info(dict_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str dict_name: Name of dictionary containing case (required)
        :param datetime _from: Start date in RFC3339 format ( e.g. 1985-04-12T23:20:50.52Z)
        :param datetime to: End date in RFC3339 format ( e.g. 1985-04-12T23:20:50.52Z)
        :param str device_id: Device Id
        :param int limit: maximum number of cases in response
        :param int offset: zero-based index of first case to return in response
        :return: SyncHistory
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['dict_name', '_from', 'to', 'device_id', 'limit', 'offset']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sync_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'dict_name' is set
        if ('dict_name' not in params or
                params['dict_name'] is None):
            raise ValueError("Missing the required parameter `dict_name` when calling `get_sync_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'dict_name' in params:
            path_params['dictName'] = params['dict_name']  # noqa: E501

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'device_id' in params:
            query_params.append(('deviceId', params['device_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/dictionaries/{dictName}/syncs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SyncHistory',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
