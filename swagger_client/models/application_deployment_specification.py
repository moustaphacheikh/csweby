# coding: utf-8

"""
    CSPro Sync

    Web API for synchronizing data and files from devices in the field to a web server.   # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ApplicationDeploymentSpecification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'file_type': 'str',
        'version': 'str',
        'name': 'str',
        'description': 'str',
        'build_time': 'datetime',
        'files': 'list[ApplicationDeploymentSpecificationFiles]',
        'dictionaries': 'list[ApplicationDeploymentSpecificationDictionaries]',
        'deployment': 'ApplicationDeploymentSpecificationDeployment'
    }

    attribute_map = {
        'file_type': 'fileType',
        'version': 'version',
        'name': 'name',
        'description': 'description',
        'build_time': 'buildTime',
        'files': 'files',
        'dictionaries': 'dictionaries',
        'deployment': 'deployment'
    }

    def __init__(self, file_type=None, version=None, name=None, description=None, build_time=None, files=None, dictionaries=None, deployment=None):  # noqa: E501
        """ApplicationDeploymentSpecification - a model defined in Swagger"""  # noqa: E501

        self._file_type = None
        self._version = None
        self._name = None
        self._description = None
        self._build_time = None
        self._files = None
        self._dictionaries = None
        self._deployment = None
        self.discriminator = None

        if file_type is not None:
            self.file_type = file_type
        if version is not None:
            self.version = version
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description
        if build_time is not None:
            self.build_time = build_time
        if files is not None:
            self.files = files
        if dictionaries is not None:
            self.dictionaries = dictionaries
        if deployment is not None:
            self.deployment = deployment

    @property
    def file_type(self):
        """Gets the file_type of this ApplicationDeploymentSpecification.  # noqa: E501


        :return: The file_type of this ApplicationDeploymentSpecification.  # noqa: E501
        :rtype: str
        """
        return self._file_type

    @file_type.setter
    def file_type(self, file_type):
        """Sets the file_type of this ApplicationDeploymentSpecification.


        :param file_type: The file_type of this ApplicationDeploymentSpecification.  # noqa: E501
        :type: str
        """

        self._file_type = file_type

    @property
    def version(self):
        """Gets the version of this ApplicationDeploymentSpecification.  # noqa: E501


        :return: The version of this ApplicationDeploymentSpecification.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this ApplicationDeploymentSpecification.


        :param version: The version of this ApplicationDeploymentSpecification.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def name(self):
        """Gets the name of this ApplicationDeploymentSpecification.  # noqa: E501


        :return: The name of this ApplicationDeploymentSpecification.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ApplicationDeploymentSpecification.


        :param name: The name of this ApplicationDeploymentSpecification.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this ApplicationDeploymentSpecification.  # noqa: E501


        :return: The description of this ApplicationDeploymentSpecification.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ApplicationDeploymentSpecification.


        :param description: The description of this ApplicationDeploymentSpecification.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def build_time(self):
        """Gets the build_time of this ApplicationDeploymentSpecification.  # noqa: E501


        :return: The build_time of this ApplicationDeploymentSpecification.  # noqa: E501
        :rtype: datetime
        """
        return self._build_time

    @build_time.setter
    def build_time(self, build_time):
        """Sets the build_time of this ApplicationDeploymentSpecification.


        :param build_time: The build_time of this ApplicationDeploymentSpecification.  # noqa: E501
        :type: datetime
        """

        self._build_time = build_time

    @property
    def files(self):
        """Gets the files of this ApplicationDeploymentSpecification.  # noqa: E501


        :return: The files of this ApplicationDeploymentSpecification.  # noqa: E501
        :rtype: list[ApplicationDeploymentSpecificationFiles]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this ApplicationDeploymentSpecification.


        :param files: The files of this ApplicationDeploymentSpecification.  # noqa: E501
        :type: list[ApplicationDeploymentSpecificationFiles]
        """

        self._files = files

    @property
    def dictionaries(self):
        """Gets the dictionaries of this ApplicationDeploymentSpecification.  # noqa: E501


        :return: The dictionaries of this ApplicationDeploymentSpecification.  # noqa: E501
        :rtype: list[ApplicationDeploymentSpecificationDictionaries]
        """
        return self._dictionaries

    @dictionaries.setter
    def dictionaries(self, dictionaries):
        """Sets the dictionaries of this ApplicationDeploymentSpecification.


        :param dictionaries: The dictionaries of this ApplicationDeploymentSpecification.  # noqa: E501
        :type: list[ApplicationDeploymentSpecificationDictionaries]
        """

        self._dictionaries = dictionaries

    @property
    def deployment(self):
        """Gets the deployment of this ApplicationDeploymentSpecification.  # noqa: E501


        :return: The deployment of this ApplicationDeploymentSpecification.  # noqa: E501
        :rtype: ApplicationDeploymentSpecificationDeployment
        """
        return self._deployment

    @deployment.setter
    def deployment(self, deployment):
        """Sets the deployment of this ApplicationDeploymentSpecification.


        :param deployment: The deployment of this ApplicationDeploymentSpecification.  # noqa: E501
        :type: ApplicationDeploymentSpecificationDeployment
        """

        self._deployment = deployment

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicationDeploymentSpecification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicationDeploymentSpecification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
