# coding: utf-8

"""
    CSPro Sync

    Web API for synchronizing data and files from devices in the field to a web server.   # noqa: E501

    OpenAPI spec version: 1.1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Case(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'caseids': 'str',
        'label': 'str',
        'data': 'RecordList',
        'notes': 'NoteList',
        'deleted': 'bool',
        'verified': 'bool',
        'partial_save': 'PartialSaveStatus',
        'clock': 'ClockVector'
    }

    attribute_map = {
        'id': 'id',
        'caseids': 'caseids',
        'label': 'label',
        'data': 'data',
        'notes': 'notes',
        'deleted': 'deleted',
        'verified': 'verified',
        'partial_save': 'partialSave',
        'clock': 'clock'
    }

    def __init__(self, id=None, caseids=None, label=None, data=None, notes=None, deleted=None, verified=None, partial_save=None, clock=None):  # noqa: E501
        """Case - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._caseids = None
        self._label = None
        self._data = None
        self._notes = None
        self._deleted = None
        self._verified = None
        self._partial_save = None
        self._clock = None
        self.discriminator = None

        self.id = id
        self.caseids = caseids
        if label is not None:
            self.label = label
        if data is not None:
            self.data = data
        if notes is not None:
            self.notes = notes
        if deleted is not None:
            self.deleted = deleted
        if verified is not None:
            self.verified = verified
        if partial_save is not None:
            self.partial_save = partial_save
        self.clock = clock

    @property
    def id(self):
        """Gets the id of this Case.  # noqa: E501

        guid  # noqa: E501

        :return: The id of this Case.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Case.

        guid  # noqa: E501

        :param id: The id of this Case.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def caseids(self):
        """Gets the caseids of this Case.  # noqa: E501

        values of case identifier variables concatenated  # noqa: E501

        :return: The caseids of this Case.  # noqa: E501
        :rtype: str
        """
        return self._caseids

    @caseids.setter
    def caseids(self, caseids):
        """Sets the caseids of this Case.

        values of case identifier variables concatenated  # noqa: E501

        :param caseids: The caseids of this Case.  # noqa: E501
        :type: str
        """
        if caseids is None:
            raise ValueError("Invalid value for `caseids`, must not be `None`")  # noqa: E501

        self._caseids = caseids

    @property
    def label(self):
        """Gets the label of this Case.  # noqa: E501

        optional label to display for case in case listing  # noqa: E501

        :return: The label of this Case.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Case.

        optional label to display for case in case listing  # noqa: E501

        :param label: The label of this Case.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def data(self):
        """Gets the data of this Case.  # noqa: E501


        :return: The data of this Case.  # noqa: E501
        :rtype: RecordList
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Case.


        :param data: The data of this Case.  # noqa: E501
        :type: RecordList
        """

        self._data = data

    @property
    def notes(self):
        """Gets the notes of this Case.  # noqa: E501


        :return: The notes of this Case.  # noqa: E501
        :rtype: NoteList
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this Case.


        :param notes: The notes of this Case.  # noqa: E501
        :type: NoteList
        """

        self._notes = notes

    @property
    def deleted(self):
        """Gets the deleted of this Case.  # noqa: E501


        :return: The deleted of this Case.  # noqa: E501
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """Sets the deleted of this Case.


        :param deleted: The deleted of this Case.  # noqa: E501
        :type: bool
        """

        self._deleted = deleted

    @property
    def verified(self):
        """Gets the verified of this Case.  # noqa: E501


        :return: The verified of this Case.  # noqa: E501
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified):
        """Sets the verified of this Case.


        :param verified: The verified of this Case.  # noqa: E501
        :type: bool
        """

        self._verified = verified

    @property
    def partial_save(self):
        """Gets the partial_save of this Case.  # noqa: E501


        :return: The partial_save of this Case.  # noqa: E501
        :rtype: PartialSaveStatus
        """
        return self._partial_save

    @partial_save.setter
    def partial_save(self, partial_save):
        """Sets the partial_save of this Case.


        :param partial_save: The partial_save of this Case.  # noqa: E501
        :type: PartialSaveStatus
        """

        self._partial_save = partial_save

    @property
    def clock(self):
        """Gets the clock of this Case.  # noqa: E501


        :return: The clock of this Case.  # noqa: E501
        :rtype: ClockVector
        """
        return self._clock

    @clock.setter
    def clock(self, clock):
        """Sets the clock of this Case.


        :param clock: The clock of this Case.  # noqa: E501
        :type: ClockVector
        """
        if clock is None:
            raise ValueError("Invalid value for `clock`, must not be `None`")  # noqa: E501

        self._clock = clock

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Case, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Case):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
